# docker compose version which is currently 3.8
version: "3.8"

# services : is a list of our container
services:
  # name is optional for our postgresdb
  postgres:
    # since postgres is an offical image we can use it.
    image: postgres

    # environment
    environment:
      POSTGRES_PASSWORD: "Postgres2022!"

    # the port that we want to publish for postgres
    ports:
      - "1432:1432"

    # our postgresdb depends on volume to keep the data alive.
    volumes:
      - data:/data/db

    networks:
      - node-webapp-network

  # name is optional for our backend
  back-end:
    # to build an image based on Dockerfile
    # it looks in this folder to find Dockerfile to build an image
    build: ./backend
    # the port that we want to publish for backend
    ports:
      - "8088:8088"
    restart: always

    # depends_on means it will start our backend container once postgres-container is  up and running.
    depends_on:
      - postgres
    environment:
      WAIT_HOSTS: postgres:1432
    networks:
      - node-webapp-network

  # name is optional for our frontend
  front-end:
    # to build an image based on Dockerfile
    # it looks in this folder to find Dockerfile to build an image
    build: ./frontend

    # the port that we want to publish for frontend
    ports:
      - "3000:3000"
    # add bind mount volume to keep have updated source code
    volumes:
      - ./frontend/src:/app/src
    # allow interactive mode
    stdin_open: true
    tty: true

    # it will start our frontend container once backend-container is  up and running.
    depends_on:
      - back-end
    networks:
      - node-webapp-network      

# declare the volumes name that our app is using.
volumes:
  data:

# declare the shared network to allow backend to talk to postgresdb
networks:
  node-webapp-network:
    driver: bridge